<?php

/**
 * @file
 * Install, update and uninstall functions for the node module.
 */

/**
 * Implements hook_schema().
 */
function node_schema() {
  $schema['node'] = array(
    'description' => 'The base table for nodes.',
    'fields' => array(
      'nid' => array(
        'description' => 'The primary identifier for a node.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // Defaults to NULL in order to avoid a brief period of potential
      // deadlocks on the index.
      'vid' => array(
        'description' => 'The current {node_revision}.vid version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'type' => array(
        'description' => 'The type of this node.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'langcode' => array(
        'description' => 'The {language}.langcode of this node.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of this node, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this node; initially, this is the user that created it.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the node was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the node was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'comment' => array(
        'description' => 'Whether comments are allowed on this node: 0 = no, 1 = closed (read only), 2 = open (read/write).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'promote' => array(
        'description' => 'Boolean indicating whether the node should be displayed on the front page.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sticky' => array(
        'description' => 'Boolean indicating whether the node should be displayed at the top of lists in which it appears.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tnid' => array(
        'description' => 'The translation set id for this node, which equals the node id of the source post in each set.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'translate' => array(
        'description' => 'A boolean indicating whether this translation page needs to be updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'node_changed'        => array('changed'),
      'node_created'        => array('created'),
      'node_frontpage'      => array('promote', 'status', 'sticky', 'created'),
      'node_status_type'    => array('status', 'type', 'nid'),
      'node_title_type'     => array('title', array('type', 4)),
      'node_type'           => array(array('type', 4)),
      'uid'                 => array('uid'),
      'tnid'                => array('tnid'),
      'translate'           => array('translate'),
    ),
    'unique keys' => array(
      'vid' => array('vid'),
    ),
    'foreign keys' => array(
      'node_revision' => array(
        'table' => 'node_revision',
        'columns' => array('vid' => 'vid'),
      ),
      'node_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['node_access'] = array(
    'description' => 'Identifies which realm/grant pairs a user must possess in order to view, update, or delete specific nodes.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node}.nid this record affects.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'gid' => array(
        'description' => "The grant ID a user must possess in the specified realm to gain this row's privileges on the node.",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'realm' => array(
        'description' => 'The realm in which the user must possess the grant ID. Each node access node can define one or more realms.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'grant_view' => array(
        'description' => 'Boolean indicating whether a user with the realm/grant pair can view this node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'grant_update' => array(
        'description' => 'Boolean indicating whether a user with the realm/grant pair can edit this node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'grant_delete' => array(
        'description' => 'Boolean indicating whether a user with the realm/grant pair can delete this node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
    ),
    'primary key' => array('nid', 'gid', 'realm'),
    'foreign keys' => array(
      'affected_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
     ),
  );

  $schema['node_revision'] = array(
    'description' => 'Stores information about each saved version of a {node}.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node} this version belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that created this version.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'The title of this version.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'timestamp' => array(
        'description' => 'A Unix timestamp indicating when this version was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the node (at the time of this revision) is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'comment' => array(
        'description' => 'Whether comments are allowed on this node (at the time of this revision): 0 = no, 1 = closed (read only), 2 = open (read/write).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'promote' => array(
        'description' => 'Boolean indicating whether the node (at the time of this revision) should be displayed on the front page.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sticky' => array(
        'description' => 'Boolean indicating whether the node (at the time of this revision) should be displayed at the top of lists in which it appears.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'uid' => array('uid'),
    ),
    'primary key' => array('vid'),
    'foreign keys' => array(
      'versioned_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'version_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['node_type'] = array(
    'description' => 'Stores information about all defined {node} types.',
    'fields' => array(
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'base' => array(
        'description' => 'The base string used to construct callbacks corresponding to this node type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'module' => array(
        'description' => 'The module defining this node type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'help' => array(
        'description' => 'Help information shown to the user when creating a {node} of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'has_title' => array(
        'description' => 'Boolean indicating whether this type uses the {node}.title field.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'tiny',
      ),
      'title_label' => array(
        'description' => 'The label displayed for the title field on the edit form.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'custom' => array(
        'description' => 'A boolean indicating whether this type is defined by a module (FALSE) or by a user via Add content type (TRUE).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'modified' => array(
        'description' => 'A boolean indicating whether this type has been modified by an administrator; currently not used in any way.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator can change the machine name of this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'disabled' => array(
        'description' => 'A boolean indicating whether the node type is disabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny'
      ),
      'orig_type' => array(
        'description' => 'The original machine-readable name of this node type. This may be different from the current type name if the locked field is 0.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('type'),
  );

  $schema['history'] = array(
    'description' => 'A record of which {users} have read which {node}s.',
    'fields' => array(
      'uid' => array(
        'description' => 'The {users}.uid that read the {node} nid.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'The {node}.nid that was read.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp at which the read occurred.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('uid', 'nid'),
    'indexes' => array(
      'nid' => array('nid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function node_install() {
  // Populate the node access table.
  db_insert('node_access')
    ->fields(array(
      'nid' => 0,
      'gid' => 0,
      'realm' => 'all',
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
    ))
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function node_uninstall() {
  // Delete node types.
  $names = config_get_names_with_prefix('node.type');
  foreach ($names as $config_name) {
    $config = config_load($config_name);
    $config->delete();
  }

  // Delete node search ranking variables.
  // @see node_ranking(), _node_rankings()
  variable_del('node_rank_relevance');
  variable_del('node_rank_sticky');
  variable_del('node_rank_promote');
  variable_del('node_rank_recent');

  // Delete remaining general module variables.
  variable_del('node_access_needs_rebuild');
  state_del('node_cron_last');
  variable_del('node_recent_block_count');
  variable_del('default_nodes_main');
}

/**
 * Implements hook_update_dependencies().
 */
function node_update_dependencies() {
  // Ensure that Entity module is enabled before running any of our updates.
  $dependencies['node'][1000] = array(
    'system' => 1000,
  );
  // Do not drop the block tables until after System module has enabled and
  // migrated blocks into layouts.
  $dependencies['node'][1004] = array(
    'system' => 1025,
  );
  return $dependencies;
}

/**
 * @addtogroup updates-7.x-to-8.x
 * @{
 */

/**
 * Set 'node' as front page path if it implicitly was before.
 *
 * Node module became optional. The default front page path was changed to
 * 'user'. Since 'node' was the implicit default front page path previously and
 * may not have been explicitly configured as such, this update ensures that the
 * old implicit default is still the default.
 *
 * @see http://drupal.org/node/375397
 */
function node_update_1000() {
  $front_page = config_get('system.core', 'site_frontpage');
  if (!isset($front_page)) {
    config_set('system.core', 'site_frontpage', 'node');
  }
}

/**
 * Rename node type language variable names.
 *
 * @see http://drupal.org/node/540294
 */
function node_update_1001() {
  $types = db_query('SELECT type FROM {node_type}')->fetchCol();
  foreach ($types as $type) {
    $language = variable_get('language_content_type_' . $type);
    if (isset($language)) {
      variable_set('node_type_language_' . $type, $language);
    }
    variable_del('language_content_type_' . $type);
  }
}

/**
 * Rename node.language field to node.langcode.
 */
function node_update_1002() {
  $spec = array(
    'description' => 'The {language}.langcode of this node.',
    'type' => 'varchar',
    'length' => 12,
    'not null' => TRUE,
    'default' => '',
  );
  db_change_field('node', 'language', 'langcode', $spec);
}

/**
 * Move theme settings to global site configuration.
 */
function node_update_1003() {
  $types = db_query('SELECT type FROM {node_type}')->fetchCol();
  $theme = variable_get('theme_default', 'stark');
  $settings = variable_get('theme_' . $theme . '_settings', array());

  // Each setting defaults to TRUE if not set at all.
  $comment_picture = !isset($settings['toggle_comment_user_picture']) || $settings['toggle_comment_user_picture'];
  $node_picture = !isset($settings['toggle_node_user_picture']) || $settings['toggle_node_user_picture'];

  // These variables will be converted to be node type settings when converted
  // to saving in config.
  foreach ($types as $type_name) {
    variable_set('node_user_picture_' . $type_name, $node_picture);
    variable_set('comment_user_picture_' . $type_name, $comment_picture);
  }
}

/**
 * Remove the block_node_type table, now stored in layout configuration files.
 */
function node_update_1004() {
  db_drop_table('block_node_type');
}

/**
 * Convert content types to configuration files.
 */
function node_update_1005() {
  // Basic sanity check.
  if (!db_table_exists('node_type')) {
    return;
  }

  // Ensure module-provided code is loaded.
  backdrop_load('module', 'node');
  backdrop_load('module', 'entity');

  $result = db_query("SELECT * FROM {node_type}");
  foreach ($result as $row) {
    $node_type = (object) $row;
    unset($node_type->locked);
    unset($node_type->custom);

    // To help assist moving to config from Features in Drupal 7, reclaim node
    // types owned by other modules that use the standard node base type.
    if ($node_type->base === 'node_content') {
      $node_type->module = 'node';
    }

    // Create each content type.
    $options = variable_get('node_options_' . $node_type->type, array('status', 'promote'));
    $node_type->settings = array(
      'status_default' => in_array('status', $options),
      'sticky_enabled' => TRUE,
      'sticky_default' => in_array('sticky', $options),
      'promote_enabled' => TRUE,
      'promote_default' => in_array('promote', $options),
      'revision_enabled' => TRUE,
      'revision_default' => in_array('revision', $options),
      'node_preview' => variable_get('node_preview_' . $node_type->type, BACKDROP_OPTIONAL),
      'node_submitted' => variable_get('node_submitted_' . $node_type->type, TRUE),
      'node_user_picture' => variable_get('node_user_picture_' . $node_type->type, TRUE),
      'node_type_language' => variable_get('node_type_language_' . $node_type->type),
    );
    node_type_save($node_type);

    // Delete the migrated variables.
    variable_del('node_options_' . $node_type->type);
    variable_del('node_preview_' . $node_type->type);
    variable_del('node_submitted_' . $node_type->type);
    variable_del('node_user_picture_' . $node_type->type);
    variable_del('node_type_language_' . $node_type->type);
  }
}

/**
 * Delete the node_type table after conversions to configuration files.
 */
function node_update_1006() {
  // This update is separate from node_update_1004() in the event that a module
  // needs to use the node_type table before it is deleted.
  if (db_table_exists('node_type')) {
    db_drop_table('node_type');
  }
}

/**
 * @} End of "addtogroup updates-7.x-to-1.x"
 * The next series of updates should start at 2000.
 */
