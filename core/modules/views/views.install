<?php

/**
 * @file
 * Contains install and update functions for Views.
 */

/**
 * Implements hook_install().
 */
function views_install() {
  if (Database::getConnection()->databaseType() == 'pgsql') {
    db_query('CREATE OR REPLACE FUNCTION first(anyelement, anyelement) RETURNS anyelement AS \'SELECT COALESCE($1, $2);\' LANGUAGE \'sql\';');
    db_query("DROP AGGREGATE IF EXISTS first(anyelement)");
    db_query("CREATE AGGREGATE first(sfunc = first, basetype = anyelement, stype = anyelement);");
  }
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'views'");
}

/**
 * Implements hook_schema().
 *
 * Generate the current version of the database schema from
 * the sequence of schema update functions. Uses a similar
 * method to install.inc's drupal_get_schema_versions() to
 * establish the update sequence.
 *
 * To change the schema, add a new views_schema_N()
 * function to match the associated views_update_N()
 *
 * @param $caller_function
 *   The name of the function that called us.
 *   Used internally, if requesting a specific schema version.
 */
function views_schema($caller_function = FALSE) {
  $schema['cache_views'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_views']['description'] = 'Cache table for Views to store loaded view configurations.';

  $schema['cache_views_data'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_views_data']['description'] = 'Cache table for views to store pre-rendered queries, results, and display output.';
  $schema['cache_views_data']['fields']['serialized']['default'] = 1;

  // @todo: Replace with key value expire store.
  // See https://github.com/backdrop/backdrop-issues/issues/136.
  $schema['views_object_cache'] = array(
    'description' => 'A special cache used to store objects that are being edited; it serves to save state in an ordinarily stateless environment.',
    'fields' => array(
      'sid' => array(
        'type' => 'varchar',
        'length' => '64',
        'description' => 'The session ID this cache object belongs to.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '128',
        'description' => 'The name of the view this cache is attached to.',
      ),
      'obj' => array(
        'type' => 'varchar',
        'length' => '32',
        'description' => 'The name of the object this cache is attached to; this essentially represents the owner so that several sub-systems can use this cache.',
      ),
      'updated' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time this cache was created or updated.',
      ),
      'data' => array(
        'type' => 'blob',
        'description' => 'Serialized data being stored.',
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('sid', 'obj', 'name'),
    'indexes' => array(
      'updated' => array('updated'),
    ),
  );

  return $schema;
}

/**
 * Rename some system variables.
 */
function views_update_7000() {
  // Views now lets users turn off query details on live preview.
  $query_on_top = variable_get('views_ui_query_on_top');
  if (isset($query_on_top)) {
    variable_set('views_ui_show_sql_query', TRUE);
    if ($query_on_top) {
      variable_set('views_ui_show_sql_query_where', 'above');
    }
    else {
      variable_set('views_ui_show_sql_query_where', 'below');
    }
    variable_del('views_ui_query_on_top');
  }

  // Rename the views_hide_help_message variable from negative to positive.
  $hide_help = variable_get('views_hide_help_message');
  if (isset($hide_help)) {
    variable_set('views_ui_show_advanced_help_warning', !$hide_help);
    variable_del('views_hide_help_message');
  }

  // Rename the unused views_no_hover_links variable.
  variable_del('views_no_hover_links');
}

/**
 * Fix missing items from Views administrative breadcrumb
 */
function views_update_7001() {
  $depth = db_select('menu_links')
    ->fields('menu_links', array('depth'))
    ->condition('link_path', 'admin/structure/views/view/%')
    ->execute()
    ->fetchField();

  if ($depth == 3) {
    db_delete('menu_links')
      ->condition('link_path', 'admin/structure/views/%', 'LIKE')
      ->execute();
    cache('menu')->flush();
    menu_rebuild();
  }
}
